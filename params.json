{
  "name": "pzgps",
  "tagline": "Read GPS data from a PiZero in a single page web app via a WebSocket",
  "body": "# pzgps\r\nThe goal of this project is to collect data from the a GPS unit and stream that data out to a web front end via a WebSocket. On the way, we'll learn how to do it in multiple UI frameworks.\r\n\r\nWe'll use [NodeJS](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions) and [node-gpsd](https://github.com/eelcocramer/node-gpsd) to read and process the data, make it available via  [ws](https://www.npmjs.com/package/ws), and render in the UI with the help of [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API).\r\n\r\n## Pull Requests Accepted\r\n* If this info turns out to be useful to you, [please let me know](https://twitter.com/dankapusta)!\r\n* I'm very open to changes/fixes/additions, please feel free to submit pull requests.\r\n\r\n## Assumptions\r\nYou...\r\n* Have a [#pizero](https://www.raspberrypi.org/products/pi-zero/) with an [ARM11](https://en.wikipedia.org/wiki/ARM11) and a GPIO header soldered onto it.\r\n* Have an [Adafruit Ultimate GPS Breakout](https://www.adafruit.com/product/746)\r\n* Have [Raspbian Jessie](https://www.raspberrypi.org/downloads/raspbian/) installed.\r\n* Have [Connected your Adafruit GPS Breakout](https://learn.adafruit.com/adafruit-ultimate-gps-on-the-raspberry-pi/using-uart-instead-of-usb)\r\n\r\n## Project Structure\r\n* At the root of the repo is an `index.js` file, which reads the GPS data and provides it over a WebSocket (on port 9001).\r\n* Sample web apps are in the `front-ends` directory. Each has it's own `package.json` file.\r\n  - Run `npm install` to install the dependencies ('deps') for each part of the project that you want to use.\r\n  - You'll run each part of the project by running `npm start` where the `package.json` is located.\r\n  - Front web apps all run on port 9001.\r\n\r\n## Installing NodeJS on the pizero\r\nThe version of NodeJS you get via `apt-get install nodejs` is out of date (so you'd be missing some important security patches).\r\n\r\nIf you want to compile node from scratch on your [#pizero](https://www.raspberrypi.org/products/pi-zero/) and wait all night for it to complete, then [check out this guide](https://www.youtube.com/watch?v=J6g53Hm0rq4).\r\n\r\nIf you want to make things a bit easier, then [download Node](https://nodejs.org/en/download/) using `wget` and install it directly. In this case we'll download the latest version (as of this writing) for ARM on the 6.x branch. Log in to your pi and remain in your home directory...\r\n\r\n    wget https://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-armv6l.tar.xz\r\n    cd /usr/local\r\n    sudo tar --strip-components 1 -xvf ~/node-v6.9.1-linux-armv6l.tar.xz\r\n    cd && rm node-v6.9.1-linux-armv6l.tar.xz\r\n\r\n\r\nNode is installed now, along with npm.\r\n* `node -v` should yield `v6.9.1`\r\n* `npm -v` should yield `3.10.8`\r\n\r\nYour `/usr/local` dir probably has a few files left over from the install (ie, CHANGELOG.md, LICENSE, README.md). You can safely remove those.\r\n\r\n\r\n## Various Useful Commands\r\n* `sudo apt-get update` and `sudo apt-get upgrade` to update your installed packages\r\n* `sudo killall gpsd` - To kill gpsd\r\n* `sudo /etc/init.d/gpsd restart` - To elegantly restart gpsd\r\n* `cgps -s` - to open a terminal UI for gps data\r\n* `cat /dev/ttyAMA0` - See raw data from the [Adafruit Ultimate GPS Breakout](https://www.adafruit.com/product/746)\r\n\r\n\r\n## Installing `gpsd`\r\nLog into your pi and install `gpsd`\r\n\r\n    sudo apt-get install gpsd gpsd-clients python-gps\r\n\r\nStart `gpsd` in verbose/debug mode...\r\n\r\n    sudo gpsd /dev/ttyAMA0 -D 2 -n -b -N -P /tmp/gpsd.pid -F /var/run/gpsd.sock\r\n\r\nWhen starting `gpsd` you might see an error like this...\r\n\r\n    gpsd:ERROR: can't bind to local socket /var/run/gpsd.sock\r\n\r\nYou can confirm data is coming to your [#pizero](https://www.raspberrypi.org/products/pi-zero/) with `cat /dev/ttyAMA0` which should show a stream of data. If you see data coming thru but the commands to start `gpsd` failed with an error about not being able to connect, then you might have to disable terminal over serial.\r\n\r\n## How disable terminal over serial\r\nThese didn't work, not sure why...\r\n\r\n    sudo systemctl stop serial-getty@ttyAMA0.service\r\n    sudo systemctl disable serial-getty@ttyAMA0.service\r\n\r\nWhat did work was...\r\n* `sudo raspi-config`\r\n* go to `Advanced Options`\r\n* then `serial` and turn it off\r\n* `sudo reboot`\r\n\r\nThe Adafruit guide mentioned above says you can do this from `/etc/inittab` but that file doesn't exist in Raspbian Jessie (it did in Wheezy). Raspbian Jessie has moved everything to services and there is no `/etc/inittab` file at all, so it's best to use the `raspi-config` command.\r\n\r\n\r\n## Configuring gpsd\r\nTo have `gpsd` start up correctly, edit `/etc/default/gpsd`\r\n\r\n    # Default settings for the gpsd init script and the hotplug wrapper.\r\n\r\n    # Start the gpsd daemon automatically at boot time\r\n    START_DAEMON=\"true\"\r\n\r\n    # Use USB hotplugging to add new USB devices automatically to the daemon\r\n    USBAUTO=\"false\"\r\n\r\n    # Devices gpsd should collect to at boot time.\r\n    # They need to be read/writeable, either by user gpsd or the group dialout.\r\n    DEVICES=\"/dev/ttyAMA0\"\r\n\r\n    # Other options you want to pass to gpsd\r\n    GPSD_OPTIONS\r\n\r\n    GPSD_SOCKET=\"/var/run/gpsd.sock\"\r\n\r\n\r\nThen restart: `sudo /etc/init.d/gpsd restart`\r\n\r\nThen try `cgps -s` and you should now see real data. If the GPS Breakout can't see the sky then you might see `no fix` which means it can't see any satellites. Either go outside or put the [#pizero](https://www.raspberrypi.org/products/pi-zero/) on a window sill. ðŸ˜€\r\n\r\n## GPS data via NodeJS\r\nNow that data is coming from the gps unit, thru `gpsd`, we can read that data from node with the help of [node-gpsd](https://github.com/eelcocramer/node-gpsd).\r\n\r\nRun `npm install` to install the deps which includes [node-gpsd](https://github.com/eelcocramer/node-gpsd)\r\n\r\nThis will handle the streaming of data from `gpsd` for us and provide the data as JSON (it can also start and stop the daemon, you should read the docs).\r\n\r\nHave a look at the `index.js` in this repo and run `npm start` in your terminal. If everything is set up correctly, you should see some basic info, then a bunch of TPV events streaming by. Now you have something you can write an application around.\r\n\r\n## Auto Start the WebSocket server at System Boot\r\nAfter getting everything set up, you might want to have the WebSocket server [auto-start when your pizero boots up](https://www.raspberrypi.org/documentation/linux/usage/rc-local.md).\r\n* Look in the `package.json` file for the `scripts` section\r\n* note the value for the `start` command\r\n* Add that command to `rc.local` with the correct path to the `index.js` file\r\n\r\nYour entry in `rc.local` will look something like this...\r\n\r\n    /usr/local/bin/node /home/pi/Projects/pzgps/index.js --port 9000 &\r\n\r\nChange the port number as needed.\r\n\r\n\r\n## Using the WebSocket from a Front End\r\n\r\n### AngularJS\r\nIn the `angular1` directory, install the deps by running `npm install` then run `npm start` to start the [webserver](https://github.com/johnpapa/lite-server). Using your web browser, navigate to your pizero's IP address on port 9001 (the default). The default port of the webserver can be changed in the `angular1/bs-config.json` file.\r\n\r\nAssuming the millions of things above went right, you'll see some GPS data in your web browser.\r\n\r\n### ReactJS\r\nIn the `reactjs` directory, install the deps by running `npm install` then run `npm start` to start the webserver. This project uses [webpack](https://webpack.github.io/) and will auto-reload your browser for you.\r\n\r\n\r\n## Enabling a MapQuest staticmap\r\nOne of the views can load a [Mapquest \"staticmap\"](http://www.mapquestapi.com/staticmap/) if you have a \"Consumer Key\" and provide a module that includes that key.\r\n\r\n* [Register for a developer account for free](https://developer.mapquest.com/).\r\n* Go to your new profile, and click the \"Create a New Key\" button.\r\n* You can always find your Consumer Key on the \"Keys &amp; Reporting\" page after creating one.\r\n* Make a file in the `lib` directory named `mqkey.js` and format it like the example below.\r\n\r\n    module.exports = {\r\n      'consumerKey': 'PASTE YOUR CONSUMER KEY HERE'\r\n    };\r\n\r\nOn the command line you can now start the server using the `--mq` flag. An NPM command is provided in `package.json` that will start with the MapQuest module included (eg, `npm run withMapquest` will execute `node index.js --port 9000 --mq`).\r\n\r\nAssuming all of the above is in place, the MapQuest component in the UI will receive the key over the WebSocket and use it to formulate the URL to get the static map. Because the client is receiving updates from the server continually, the map will update if the coordinates change.\r\n",
  "google": "UA-16063192-7",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}