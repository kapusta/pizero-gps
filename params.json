{
  "name": "pizero gps",
  "tagline": "a side project using gps on a raspberry pi zero",
  "body": "# gps over serial on your raspberry pi\r\n\r\n## Hello\r\n\r\n* If this info turns out to be useful to you, [let me know](https://twitter.com/dankapusta)!\r\n* I'm very open to changes/fixes/additions, please feel free to submit pull requests.\r\n\r\n\r\n## Assumptions\r\n\r\nYou...\r\n* Have a #pizero with an [ARM11](https://en.wikipedia.org/wiki/ARM11) and a GPIO header soldered onto it.\r\n* Have an [Adafruit Ultimate GPS Breakout](https://www.adafruit.com/product/746)\r\n* Have [Raspbian Jessie](https://www.raspberrypi.org/downloads/raspbian/) installed.\r\n* Have [Connected your Adafruit GPS Breakout](https://learn.adafruit.com/adafruit-ultimate-gps-on-the-raspberry-pi/using-uart-instead-of-usb)\r\n\r\n## Installing NodeJS\r\nThe goal of this project is to collect data from the GPS and dump it into a database to be queried out later. We'll use [NodeJS](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions) and [node-gpsd](https://github.com/eelcocramer/node-gpsd) to read, process and store the data.\r\n\r\nIf you want to compile node from scratch on your pi and wait all night for it to complete, then [check out this guide](https://www.youtube.com/watch?v=J6g53Hm0rq4).\r\n\r\nIf you want to make things a bit easier then download the version of Node you want using wget and install it directly. In this case we'll download the latest version for ARM on the 4.x branch...\r\n* Log in to your pi and remain in your home directory\r\n* `wget https://nodejs.org/dist/v4.6.0/node-v4.6.0-linux-armv6l.tar.xz`\r\n* `cd /usr/local`\r\n* `sudo tar --strip-components 1 -xvf ~/node-v4.6.0-linux-armv6l.tar.xz`\r\n* `cd && rm node-v4.6.0-linux-armv6l.tar.xz`\r\n* `node -v` should yield `v4.6.0`\r\n* `npm -v` should yield `2.15.9`\r\n\r\nYour `/usr/local` dir probably has a few files left over from the install (ie, CHANGELOG.md, LICENSE, README.md). You can safely remove those.\r\n\r\n\r\n## Various Useful Commands\r\n* Kill gpsd - `sudo killall gpsd`\r\n* Elegantly restart gpsd - `sudo /etc/init.d/gpsd restart`\r\n* Terminal UI for gps data - `cgps -s`\r\n* See raw data from the device - `cat /dev/ttyAMA0`\r\n\r\n\r\n## Start gpsd in verbose/debug mode\r\nLog into your pi and install `gpsd`\r\n\r\n    sudo apt-get install gpsd gpsd-clients python-gps\r\n\r\n...then try this command...\r\n\r\n    sudo gpsd /dev/ttyAMA0 -D 2 -n -b -N -P /tmp/gpsd.pid -F /var/run/gpsd.sock\r\n\r\nWhen starting `gpsd` you might see an error like this...\r\n\r\n    gpsd:ERROR: can't bind to local socket /var/run/gpsd.sock\r\n\r\nYou can confirm data is coming to your #pizero with `cat /dev/ttyAMA0` which should show a stream of data. If you see data coming thru but the commands to start `gpsd` failed with an error about not being able to connect, then you might have to disable terminal over serial.\r\n\r\n## How disable terminal over serial\r\nThese didn't work, not sure why...\r\n\r\n    sudo systemctl stop serial-getty@ttyAMA0.service\r\n    sudo systemctl disable serial-getty@ttyAMA0.service\r\n\r\nWhat did work was...\r\n* `sudo raspi-config`\r\n* go to `Advanced Options`\r\n* then `serial` and turn it off\r\n* reboot\r\n\r\nThe Adafruit guide mentioned above says you can do this from `/etc/inittab` but that file doesn't exist in Raspbian Jessie (it did in Wheezy). Raspbian Jessie has moved everything to services and there is no `/etc/inittab` file at all, so it's best to use the `raspi-config` command.\r\n\r\n\r\n## Configure gpsd\r\n\r\nTo have `gpsd` start up correctly, edit `/etc/default/gpsd`\r\n\r\n    # Default settings for the gpsd init script and the hotplug wrapper.\r\n\r\n    # Start the gpsd daemon automatically at boot time\r\n    START_DAEMON=\"true\"\r\n\r\n    # Use USB hotplugging to add new USB devices automatically to the daemon\r\n    USBAUTO=\"false\"\r\n\r\n    # Devices gpsd should collect to at boot time.\r\n    # They need to be read/writeable, either by user gpsd or the group dialout.\r\n    DEVICES=\"/dev/ttyAMA0\"\r\n\r\n    # Other options you want to pass to gpsd\r\n    GPSD_OPTIONS\r\n\r\n    GPSD_SOCKET=\"/var/run/gpsd.sock\"\r\n\r\n\r\nThen restart: `sudo /etc/init.d/gpsd restart`\r\n\r\nThen try `cgps -s` and you should now see real data. If the GPS Breakout can't see the sky then you might see `no fix` which means it can't see any satellites. Either go outside or put the #pizero on a window sill. \r\n\r\n## GPS data via nodejs\r\n\r\nNow that data is coming from the gps unit, thru `gpsd`, we can read that data from node with the help of [node-gpsd](https://github.com/eelcocramer/node-gpsd).\r\n\r\nThis will handle the starting and stopping of `gpsd` for us and provide the data as JSON.\r\n\r\nHave a look at the index.js file in this repo and try `node index.js` in your terminal. If everything is set up correctly, you should see some basic info, then a bunch of TPV events streaming by. Now you have something you can write an application around.\r\n",
  "google": "UA-16063192-7",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}